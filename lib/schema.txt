-- Crime Reporting App - Supabase Database Schema
-- This schema supports user management, crime reporting, and location-based features

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "postgis"; -- For advanced geospatial queries (optional)

-- ========== USERS TABLE ==========
CREATE TABLE users (
    id UUID PRIMARY KEY, -- Will match Firebase Auth UID
    email TEXT UNIQUE NOT NULL,
    name TEXT,
    profile_picture_url TEXT,
    phone TEXT,
    is_verified BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add RLS (Row Level Security) for users
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Users can only see and update their own data
CREATE POLICY "Users can view own profile" ON users
    FOR SELECT USING (auth.uid()::text = id::text);

CREATE POLICY "Users can update own profile" ON users
    FOR UPDATE USING (auth.uid()::text = id::text);

-- ========== CRIME CATEGORIES TABLE ==========
CREATE TABLE crime_categories (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    severity TEXT NOT NULL CHECK (severity IN ('High', 'Medium', 'Low')),
    icon TEXT, -- Optional icon identifier
    color TEXT, -- Hex color code for UI
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert default crime categories
INSERT INTO crime_categories (name, description, severity, icon, color) VALUES
('Theft', 'Stealing of personal property', 'Medium', 'theft', '#FF9800'),
('Assault', 'Physical violence against a person', 'High', 'assault', '#F44336'),
('Vandalism', 'Destruction of public or private property', 'Low', 'vandalism', '#FFC107'),
('Drug Activity', 'Illegal drug-related activities', 'High', 'drugs', '#9C27B0'),
('Burglary', 'Breaking and entering with intent to steal', 'High', 'burglary', '#D32F2F'),
('Vehicle Crime', 'Car theft, break-ins, or vandalism', 'Medium', 'vehicle', '#FF5722'),
('Fraud', 'Financial or identity fraud', 'Medium', 'fraud', '#607D8B'),
('Harassment', 'Threatening or intimidating behavior', 'Medium', 'harassment', '#795548'),
('Public Disturbance', 'Noise complaints, public intoxication', 'Low', 'disturbance', '#4CAF50'),
('Cyber Crime', 'Online fraud, hacking, or digital crimes', 'Medium', 'cyber', '#2196F3'),
('Domestic Violence', 'Violence within domestic relationships', 'High', 'domestic', '#E91E63'),
('Street Crime', 'Mugging, street robbery', 'High', 'street', '#FF1744'),
('Suspicious Activity', 'Unusual or potentially criminal behavior', 'Low', 'suspicious', '#9E9E9E'),
('Other', 'Other criminal activities not listed', 'Medium', 'other', '#757575');

-- ========== POSTS TABLE (Crime Reports) ==========
CREATE TABLE posts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    crime_type_id INTEGER NOT NULL REFERENCES crime_categories(id),
    title TEXT, -- Optional title for the report
    description TEXT NOT NULL,
    evidence_image_url TEXT,
    latitude DECIMAL(10, 8) NOT NULL,
    longitude DECIMAL(11, 8) NOT NULL,
    location_text TEXT, -- Human-readable address
    incident_time TIMESTAMP WITH TIME ZONE, -- When the crime occurred
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'resolved', 'investigating', 'false_report')),
    is_anonymous BOOLEAN DEFAULT FALSE,
    upvotes INTEGER DEFAULT 0,
    downvotes INTEGER DEFAULT 0,
    view_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add indexes for better performance
CREATE INDEX idx_posts_location ON posts (latitude, longitude);
CREATE INDEX idx_posts_crime_type ON posts (crime_type_id);
CREATE INDEX idx_posts_user_id ON posts (user_id);
CREATE INDEX idx_posts_created_at ON posts (created_at DESC);
CREATE INDEX idx_posts_status ON posts (status);

-- Add RLS for posts
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;

-- Anyone can view active posts
CREATE POLICY "Anyone can view active posts" ON posts
    FOR SELECT USING (status = 'active');

-- Users can insert their own posts
CREATE POLICY "Users can insert own posts" ON posts
    FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);

-- Users can update their own posts
CREATE POLICY "Users can update own posts" ON posts
    FOR UPDATE USING (auth.uid()::text = user_id::text);

-- Users can delete their own posts
CREATE POLICY "Users can delete own posts" ON posts
    FOR DELETE USING (auth.uid()::text = user_id::text);

-- ========== POST VOTES TABLE ==========
CREATE TABLE post_votes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    vote_type TEXT NOT NULL CHECK (vote_type IN ('up', 'down')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(post_id, user_id) -- One vote per user per post
);

-- Add RLS for post_votes
ALTER TABLE post_votes ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage own votes" ON post_votes
    FOR ALL USING (auth.uid()::text = user_id::text);

-- ========== COMMENTS TABLE ==========
CREATE TABLE comments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    is_anonymous BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add RLS for comments
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Anyone can view comments" ON comments
    FOR SELECT USING (true);

CREATE POLICY "Users can insert own comments" ON comments
    FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);

CREATE POLICY "Users can update own comments" ON comments
    FOR UPDATE USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can delete own comments" ON comments
    FOR DELETE USING (auth.uid()::text = user_id::text);

-- ========== NOTIFICATIONS TABLE ==========
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    type TEXT NOT NULL CHECK (type IN ('crime_alert', 'comment', 'vote', 'system', 'update')),
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    related_post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add index for notifications
CREATE INDEX idx_notifications_user_id ON notifications (user_id);
CREATE INDEX idx_notifications_created_at ON notifications (created_at DESC);

-- Add RLS for notifications
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own notifications" ON notifications
    FOR SELECT USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can update own notifications" ON notifications
    FOR UPDATE USING (auth.uid()::text = user_id::text);

-- ========== USER SETTINGS TABLE ==========
CREATE TABLE user_settings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE UNIQUE,
    notification_radius_km DECIMAL(5,2) DEFAULT 5.0,
    email_notifications BOOLEAN DEFAULT TRUE,
    push_notifications BOOLEAN DEFAULT TRUE,
    location_sharing BOOLEAN DEFAULT TRUE,
    anonymous_posting BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add RLS for user_settings
ALTER TABLE user_settings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage own settings" ON user_settings
    FOR ALL USING (auth.uid()::text = user_id::text);

-- ========== FUNCTIONS ==========

-- Function to update post vote counts
CREATE OR REPLACE FUNCTION update_post_vote_counts()
RETURNS TRIGGER AS $$
BEGIN
    -- Update upvotes and downvotes count
    UPDATE posts 
    SET 
        upvotes = (SELECT COUNT(*) FROM post_votes WHERE post_id = COALESCE(NEW.post_id, OLD.post_id) AND vote_type = 'up'),
        downvotes = (SELECT COUNT(*) FROM post_votes WHERE post_id = COALESCE(NEW.post_id, OLD.post_id) AND vote_type = 'down'),
        updated_at = NOW()
    WHERE id = COALESCE(NEW.post_id, OLD.post_id);
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Trigger to update vote counts
CREATE TRIGGER trigger_update_post_vote_counts
    AFTER INSERT OR UPDATE OR DELETE ON post_votes
    FOR EACH ROW
    EXECUTE FUNCTION update_post_vote_counts();

-- Function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers for updating timestamps
CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON users 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_posts_updated_at 
    BEFORE UPDATE ON posts 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_comments_updated_at 
    BEFORE UPDATE ON comments 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_settings_updated_at 
    BEFORE UPDATE ON user_settings 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- ========== STORAGE SETUP ==========
-- Create storage bucket for crime evidence images
INSERT INTO storage.buckets (id, name, public) 
VALUES ('crime_evidence', 'crime_evidence', true)
ON CONFLICT (id) DO NOTHING;

-- Storage policy for crime evidence
CREATE POLICY "Users can upload evidence images" ON storage.objects
    FOR INSERT WITH CHECK (
        bucket_id = 'crime_evidence' 
        AND auth.uid()::text = (storage.foldername(name))[1]
    );

CREATE POLICY "Anyone can view evidence images" ON storage.objects
    FOR SELECT USING (bucket_id = 'crime_evidence');

CREATE POLICY "Users can delete own evidence images" ON storage.objects
    FOR DELETE USING (
        bucket_id = 'crime_evidence' 
        AND auth.uid()::text = (storage.foldername(name))[1]
    );

-- ========== USEFUL VIEWS ==========

-- View for posts with related data
CREATE VIEW posts_with_details AS
SELECT 
    p.*,
    cc.name as crime_category_name,
    cc.severity as crime_severity,
    cc.color as crime_color,
    u.name as user_name,
    u.profile_picture_url as user_profile_picture,
    CASE WHEN p.is_anonymous THEN 'Anonymous' ELSE u.name END as display_name
FROM posts p
JOIN crime_categories cc ON p.crime_type_id = cc.id
LEFT JOIN users u ON p.user_id = u.id
WHERE p.status = 'active';

-- View for nearby crimes function (requires coordinates)
CREATE OR REPLACE FUNCTION get_nearby_crimes(
    user_lat DECIMAL(10,8),
    user_lng DECIMAL(11,8),
    radius_km DECIMAL DEFAULT 5.0
)
RETURNS TABLE (
    id UUID,
    title TEXT,
    description TEXT,
    crime_category_name TEXT,
    severity TEXT,
    latitude DECIMAL(10,8),
    longitude DECIMAL(11,8),
    distance_km DECIMAL,
    created_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        p.id,
        p.title,
        p.description,
        cc.name,
        cc.severity,
        p.latitude,
        p.longitude,
        ROUND(
            (6371 * acos(
                cos(radians(user_lat)) * 
                cos(radians(p.latitude)) * 
                cos(radians(p.longitude) - radians(user_lng)) + 
                sin(radians(user_lat)) * 
                sin(radians(p.latitude))
            ))::numeric,
            2
        ) as distance_km,
        p.created_at
    FROM posts p
    JOIN crime_categories cc ON p.crime_type_id = cc.id
    WHERE p.status = 'active'
    AND (
        6371 * acos(
            cos(radians(user_lat)) * 
            cos(radians(p.latitude)) * 
            cos(radians(p.longitude) - radians(user_lng)) + 
            sin(radians(user_lat)) * 
            sin(radians(p.latitude))
        )
    ) <= radius_km
    ORDER BY distance_km ASC;
END;
$$ LANGUAGE plpgsql;

-- ========== SAMPLE DATA (Optional) ==========
-- You can uncomment these to add some sample data for testing

/*
-- Sample users (you'll need to replace with actual Firebase UIDs)
INSERT INTO users (id, email, name) VALUES
('sample-user-1', 'user1@example.com', 'John Doe'),
('sample-user-2', 'user2@example.com', 'Jane Smith');

-- Sample posts
INSERT INTO posts (user_id, crime_type_id, description, latitude, longitude, location_text) VALUES
('sample-user-1', 1, 'My bike was stolen from the parking area', 23.7985, 90.3842, 'Dhaka University Area'),
('sample-user-2', 2, 'Witnessed an assault near the shopping mall', 23.8103, 90.4125, 'Uttara, Dhaka');
*/